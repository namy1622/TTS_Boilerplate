@using TTS_boilerplate.Authorization
@using TTS_boilerplate.Category.Dto
@using TTS_boilerplate.Models

@model TTS_boilerplate.Web.Models.Products.IndexViewModel
@{
    var categories = ViewBag.Categories as List<CategoryDto>;
}
<link href="~/css/Product/index_product.css" rel="stylesheet" />

<div class="products-container " >
    <div class="banner" style="">
    <div class="carousel-container">
        <div class="carousel">
                <div class="carousel-inner rounded-xl">
                <div class="carousel-item active">
                        <img src="https://cdn.s99.vn/ss1/prod/product/660770f1aac733387ccee71f7ef5240c.jpg" alt="Banner 1" class="carousel-img object-fit">
                    
                </div>
                <div class="carousel-item">
                        <img src="https://img.freepik.com/premium-psd/gaming-laptop-sale-promotion-banner_252779-916.jpg?w=740" alt="Banner 2" class="carousel-img object-fit">
                    
                </div>
                <div class="carousel-item">
                        <img src="https://th.bing.com/th/id/R.5a635f6991c6faaf811b8de9f4c51c1d?rik=17DePTGnx8z5sQ&pid=ImgRaw&r=0" alt="Banner 3" class="carousel-img object-fit">
                    
                </div>
                <div class="carousel-item">
                        <img src="https://phucanhcdn.com/media/banner/01_Junb1a93082a8fc1aaf43e87714810ec2a2.jpg" alt="Banner 4" class="carousel-img object-fit">
                   
                </div>
            </div>
            <button class="carousel-control carousel-control-prev">❮</button>
            <button class="carousel-control carousel-control-next">❯</button>
        </div>
        <div class="carousel-indicators" style="background:none">
            <div class="carousel-indicator active" data-slide-to="0"></div>
            <div class="carousel-indicator" data-slide-to="1"></div>
            <div class="carousel-indicator" data-slide-to="2"></div>
            <div class="carousel-indicator" data-slide-to="3"></div>
        </div>
    </div>
    </div>


    <div class="container product-section">

        <div class="text-start mb-10">
            <h2 class="text-3xl font-bold text-gray-800 relative inline-block pb-2 gradient-underline">
                @L("Product List")
            </h2>
        </div>

        <div class="row " id="ProductList">
            @* render product list *@
        </div>
        <!-- Pagination -->
        <div class="pagination-container">
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center" id="pagination">
                </ul>
            </nav>
        </div>
        

        <!-- Modal -->
        <div class="modal fixed inset-0 flex  items-center justify-center p-4 bg-black bg-opacity-50 z-50" id="modalCard">
            <div class="modal-overlay absolute  inset-0 bg-black bg-opacity-50"></div>
            <div class="modal-card bg-white rounded-xl shadow-2xl max-w-4xl w-full relative z-10 overflow-hidden">
                <button class="modal-close absolute top-4 right-4 w-10 h-10 rounded-full flex items-center justify-center text-gray-500 hover:bg-gray-100 transition-colors">
                    <i class="fas fa-times text-xl"></i>
                </button>

                <div class="flex flex-col xl:flex-row">
                    <div class="w-full md:w-1/2 p-6">
                        <div class="rounded-lg overflow-hidden shadow-md">
                            <img src=""
                                style="width:400px"
                                 alt="Product image"
                                 id="modalImage"
                                 class="w-full h-64 md:h-80 object-fit modal-image transition-transform duration-300">
                        </div>
                    </div>

                    <div class="w-full md:w-1/2 p-6 flex flex-col">
                        <h3 class="text-2xl font-bold text-gray-800 mb-4" id="modalName"></h3>

                        <div class="mb-6">
                            <span class="text-3xl font-bold text-blue-600" id="modalPrice"></span>
                            @* <span class="ml-2 bg-red-100 text-red-800 text-xs font-medium px-2.5 py-0.5 rounded">20% OFF</span> *@
                        </div>

                        <div class="mb-6">
                            <p class="text-gray-600 leading-relaxed" id="modalDescription">
                            </p>
                        </div>
                        <div class="mt-auto flex flex-col sm:flex-row gap-4">
                            <a id="detailProduct"  class="flex-1 flex items-center justify-center gap-2 px-6 py-2 border-2 border-blue-600 text-blue-600 font-medium rounded-full hover:bg-blue-50 transition-colors">
                                 Chi Tiết Sản Phẩm
                            </a>
                        </div>
                        @* <div class="mt-3 flex flex-col sm:flex-row gap-4">
                            <button id="buyNow" class="flex-1 flex items-center justify-center gap-2 px-4 py-0 border-2 border-blue-600 text-blue-600 font-medium rounded-full hover:bg-blue-50 transition-colors">
                                <i class="fas fa-shopping-bag"></i> Mua Ngay
                            </button>
                            <button id="addCart" asp-controller="Carts" data-product-id="0" class="flex-1 flex items-center justify-center gap-2 px-4 py-0 text-white font-medium rounded-full btn-primary-gradient">
                                <i class="fas fa-shopping-cart"></i> Thêm Giỏ Hàng
                            </button>
                        </div> *@
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <environment names="Development">
        <script src="~/view-resources/Views/products/index.js" asp-append-version="true"></script>
    </environment>

    <environment names="Staging,Production">
        <script src="~/view-resources/Views/products/index.min.js" asp-append-version="true"></script>
    </environment>
}

<style>
        
    </style>


<script>
    /*=============== CARD POPUP JS ===============*/
    const modal = document.querySelectorAll('.modal'),
        cardBtn = document.querySelectorAll('.card__product'),
        modalClose = document.querySelectorAll('.modal__close'),
        modalCard = document.querySelectorAll('.modal__card'),
        modalOverlay = document.querySelectorAll('.modal__overlay')

    let activeModal = (modalClick) => {
        modal[modalClick].classList.add('active-modal')
        document.body.style.overflow = 'hidden' // Prevent scrolling when modal is open
    }

    /* Show modal */
    cardBtn.forEach((cardBtn, i) => {
        cardBtn.addEventListener('click', () => {
            activeModal(i)
        })
    })

    /* Hide modal */
    modalClose.forEach((modalClose) => {
        modalClose.addEventListener('click', () => {
            modal.forEach((modalRemove) => {
                modalRemove.classList.remove('active-modal')
                document.body.style.overflow = 'auto' // Enable scrolling when modal is closed
            })
        })
    })

    /* Hide modal on background click */
    modal.forEach((modal) => {
        modal.addEventListener('click', () => {
            modal.classList.remove('active-modal')
            document.body.style.overflow = 'auto' // Enable scrolling when modal is closed
        })
    })

    /* Also allow closing on overlay click */
    modalOverlay.forEach((overlay) => {
        overlay.addEventListener('click', () => {
            modal.forEach((modalRemove) => {
                modalRemove.classList.remove('active-modal')
                document.body.style.overflow = 'auto' // Enable scrolling when modal is closed
            })
        })
    })

    /* Don't hide modal on card click (by event propagation) */
    modalCard.forEach((modalCard) => {
        modalCard.addEventListener('click', (e) => {
            e.stopPropagation()
        })
    })

    // -- BANNER --
    document.addEventListener('DOMContentLoaded', function () {
        const carouselItems = document.querySelectorAll('.carousel-item');
        const indicators = document.querySelectorAll('.carousel-indicator');
        const prevButton = document.querySelector('.carousel-control-prev');
        const nextButton = document.querySelector('.carousel-control-next');

        let currentIndex = 0;
        let interval;

        // Hàm hiển thị slide
        function showSlide(index) {
            // Ẩn tất cả slides
            carouselItems.forEach(item => {
                item.classList.remove('active');
            });

            // Gỡ bỏ active từ tất cả indicators
            indicators.forEach(indicator => {
                indicator.classList.remove('active');
            });

            // Hiển thị slide hiện tại
            carouselItems[index].classList.add('active');
            indicators[index].classList.add('active');

            currentIndex = index;
        }

        // Chức năng chuyển đến slide tiếp theo
        function nextSlide() {
            let nextIndex = currentIndex + 1;
            if (nextIndex >= carouselItems.length) {
                nextIndex = 0;
            }
            showSlide(nextIndex);
        }

        // Chức năng chuyển đến slide trước đó
        function prevSlide() {
            let prevIndex = currentIndex - 1;
            if (prevIndex < 0) {
                prevIndex = carouselItems.length - 1;
            }
            showSlide(prevIndex);
        }

        // Thiết lập auto chuyển slide
        function startAutoSlide() {
            interval = setInterval(nextSlide, 5000); // Chuyển slide mỗi 5 giây
        }

        // Dừng auto chuyển slide
        function stopAutoSlide() {
            clearInterval(interval);
        }

        // Gán sự kiện cho nút prev
        prevButton.addEventListener('click', function () {
            stopAutoSlide();
            prevSlide();
            startAutoSlide();
        });

        // Gán sự kiện cho nút next
        nextButton.addEventListener('click', function () {
            stopAutoSlide();
            nextSlide();
            startAutoSlide();
        });

        // Gán sự kiện cho các indicators
        indicators.forEach((indicator, index) => {
            indicator.addEventListener('click', function () {
                stopAutoSlide();
                showSlide(index);
                startAutoSlide();
            });
        });

        // Bắt đầu tự động chuyển slide
        startAutoSlide();

        // Tạm dừng tự động khi di chuột vào carousel
        document.querySelector('.carousel').addEventListener('mouseenter', stopAutoSlide);

        // Tiếp tục tự động khi di chuột ra khỏi carousel
        document.querySelector('.carousel').addEventListener('mouseleave', startAutoSlide);
    });
</script>